Sub Auto_Open()

    removeOldCards

End Sub
Sub removeOldCards()
    
    ImportRawData
    
    On Error GoTo errorEmail
    Dim caller As String: caller = "removeOldCards"
    
    Dim lastRow As Long, firstRow As Long, lngLastRow As Long, lastNameCell As Long
    Dim statusArr As Variant: statusArr = Array("A", "F", "B", "L")
    Dim finalCardCount As String, statusVal As String, cardVal As String, emailVal As String, blankCount As String
    Dim xlWB As Workbook: Set xlWB = ThisWorkbook
    Dim xlWS As Worksheet: Set xlWS = xlWB.Worksheets(1)
    Dim argTwo As Range
    
    xlWB.Worksheets(2).Activate
    Set argTwo = xlWB.Worksheets(2).Range(Range("A1"), Range("D1").End(xlDown))
    
    Application.ScreenUpdating = False
    
    firstRow = xlWS.Range("A3").Row
    lastRow = xlWS.Range("A3").End(xlDown).Row
    
    For lngLastRow = lastRow To 3 Step -1
    ' deletes any rows which have a code different to one of the values in statusArr
    ' this will only leave rows with credit cards which are currently active
        statusVal = xlWS.Range("A" & lngLastRow).Value
        cardVal = xlWS.Range("C" & lngLastRow).Value
        xlWS.Range("C" & lngLastRow).Value = "XXXX-XXXX-XX" & Mid(cardVal, 11, 2) & "-" & Right(cardVal, 4)
        If statusVal <> "" And IsInArray(statusVal, statusArr) Then
            xlWS.Range("A" & lngLastRow).EntireRow.Delete
        Else
        ' if the email address is the company email address then insert everything
        ' before the @ symbol into column i and set the colour to white.
            emailVal = xlWS.Range("G" & lngLastRow).Value
            If emailVal Like "*SAMSUNG*" Or emailVal Like "*samsung*" Then
            With xlWS.Range("I" & lngLastRow)
                .Value = LCase(Left(emailVal, InStr(1, emailVal, "@", vbBinaryCompare) - 1))
                .Interior.ColorIndex = 0
            End With
            Else
            '~~~~~~~~~~~~~~~~~~~
            ' each time the report is run, I will append the non-work email and corresponding id onto another
            ' sheet so that the below vLookUp can fill in the ids for non work emails each time the procedure is run.
            On Error Resume Next
                xlWS.Range("I" & lngLastRow).Value = Application.WorksheetFunction.VLookup(emailVal, argTwo, 4, False)
                '~~~~~~~~~~~~~~~~~~~~
            End If
        End If
    Next lngLastRow
    
    On Error GoTo errorEmail
    
    With xlWS
        .Activate
        .Columns("A:G").AutoFit
        End With
    
    ' displays a messagebox with the count of all the remaining rows and the number of blank values
    ' in the id column. any blank values will need to be manually filled using a database.
    finalCardCount = ThisWorkbook.Worksheets(1).Range(Range("A3"), Range("A3").End(xlDown)).Count
    lastNameCell = xlWS.Range("I3000").End(xlUp).Row
    blankCount = WorksheetFunction.CountBlank(xlWS.Range("I3:I" & lastNameCell))
    ' if there are any blanks then there is an exception and so an error is raised.
    ' since we will go to successEmail on Error, I will be notified by email with the information in the below if statement.
    If blankCount > 0 Then
        Err.Raise 8008135, Description:="There are blanks within the file export. Please manually fill these blanks before uploading!"
    End If
    
    ' calls to subs which will export the file
    ' and clean the workbook ready for the next import.
    exportToGYSACSV
    cleanColI
    
    ' success email will notify me that the script has run correctly and that the output file is ready to be imported.
    GoTo successEmail
    Exit Sub
    
successEmail:

    SuccessHandler ThisWorkbook.Name, finalCardCount, blankCount
    ThisWorkbook.Close SaveChanges:=True
    Application.ScreenUpdating = True
    Exit Sub

errorEmail:

    CustomErrorHandler caller
    Exit Sub

End Sub
Function IsInArray(stringToBeFound As String, arr As Variant) As Boolean
  
    IsInArray = (UBound(Filter(arr, stringToBeFound)) > -1)

End Function
Sub exportToGYSACSV()

    On Error GoTo errorEmail
    Dim caller As String: caller = "exportTOGYSACSV"

    Dim xlWB As Workbook, thisWB As Workbook
    Dim xlWS As Worksheet, thisWS As Worksheet
    Dim knoxID As Range, numCCYLim As Range, targetPaste As Range
    Dim pasteLength As Long
    Dim filePath As String, fileName As String: filePath = "D:\Users\r.green\Documents\GYSA Import\"
    
    fileName = "Exports\CC_CSVImport " & Format(Date, "dd-mm-yy") & ".csv"
    
    Application.ScreenUpdating = False
    
    ' opens a template file and pastes all the columns into the template
    ' before saving it into a new folder, ready for upload into the sharepoint server
    Set xlWB = Workbooks.Open(filePath & "CC_CSVImport.csv")
    Set xlWS = xlWB.Worksheets(1)
    Set thisWB = ThisWorkbook
    Set thisWS = thisWB.Sheets("Sheet1")
    
    With thisWS
        .Activate
        .Select
    End With
    
    Set knoxID = thisWS.Range(Range("I3"), Range("I3").End(xlDown))
    pasteLength = knoxID.Count
    
    With xlWS
        .Activate
        .Range(Range("A10"), Range("A" & 10 + (pasteLength - 1))).Value = knoxID.Value
    End With
    
    With thisWS
        .Activate
        .Select
    End With
    
    Set numCCYLim = thisWS.Range(Range("C3"), Range("E3").End(xlDown))
    pasteLength = thisWS.Range(Range("C3"), Range("C3").End(xlDown)).Count
    
    With xlWS
        .Activate
        .Range("B10:D" & 10 + (pasteLength - 1)).Value = numCCYLim.Value
    End With
    
    With xlWB
        .SaveAs filePath & fileName, xlCSV
        .Save
        .Close (True)
    End With
    
    Application.ScreenUpdating = True
    
    Exit Sub
    
errorEmail:

    CustomErrorHandler caller
    Exit Sub
    
End Sub
Sub cleanColI()

    On Error GoTo errorEmail
    Dim caller As String: caller = "cleanColI"

    With ThisWorkbook.Worksheets(1).Range("A3:I10000")
        .ClearContents
        .ClearFormats
    End With
    
    Exit Sub
    
errorEmail:

    CustomErrorHandler caller
    Exit Sub

End Sub
Sub moveErrVals()

    Dim iterVal As Long
    Dim valCol As Range
    Set valCol = Range("K3:K3000")
    Dim xlWB As Workbook
    Dim xlWS As Worksheet
    
    Set xlWB = ThisWorkbook
    Set xlWS = xlWB.Worksheets(1)
    
    For iterVal = valCol.Count To 3 Step -1
    With xlWS
        If .Range("K" & iterVal).Value <> "" Then
            .Range("I" & iterVal).Value = .Range("K" & iterVal).Value
            .Range("K" & iterVal).ClearContents
            .Range("I" & iterVal).ClearFormats
        End If
    End With
    Next iterVal

End Sub
Sub ImportRawData()

    On Error GoTo errorEmail
    ' caller is simply the name of the sub procedure which will be passed to the
    ' error handle and included in the notification email which is sent to me.
    Dim caller As String: caller = "ImportRawData"

    Dim importPath As String: importPath = "D:\Users\r.green\Downloads"
    
    Application.ScreenUpdating = False
    
        If Right(importPath, 1) <> "\" Then
            importPath = importPath + "\"
        End If
    Dim importFile As String: importFile = "GYSA_import Delivery.xlsx"
    Dim importWB As Workbook, targetWB As Workbook: Set targetWB = ThisWorkbook
    Dim importWS As Worksheet, targetWS As Worksheet: Set targetWS = targetWB.Worksheets(1)
    Dim importStartRow As Long, importEndRow As Long, targetStartRow As Long, targetEndRow As Long: targetStartRow = 3 'target start is the first row for pasting into
    
    Set importWB = Workbooks.Open(importPath & importFile, ReadOnly:=False)
    Set importWS = importWB.Worksheets(1)

    With importWB
        .Activate
        With importWS
            importStartRow = 2
            importEndRow = .Range("A1").End(xlDown).Row
            targetEndRow = importEndRow + 1
            With targetWS.Range("A" & targetStartRow & ":G" & targetEndRow)
                .NumberFormat = "@"
                .Value = importWS.Range("A" & importStartRow & ":G" & importEndRow).Value
            End With
        End With
        .Close SaveChanges:=False
    End With
    
    targetWB.Activate

    Application.ScreenUpdating = True
    
    Exit Sub
    
errorEmail:

    CustomErrorHandler caller
    Exit Sub

End Sub
Sub CustomErrorHandler(subName As String)

    ' if an error is raised during the execution of the procedure then
    ' I will receive an email with a description of the error and when it
    ' occurred.
    Dim oApp As Outlook.Application
    Dim oMail As MailItem
    
    Set oApp = CreateObject("Outlook.Application")
    Set oMail = oApp.CreateItem(olMailItem)
    
    With oMail
        .Subject = "VBA Error | Sub: " & subName & " | Error Number: " & Err.Number
        .Body = "The following error has been raised whilst running the " & subName & " procedure" & _
            vbNewLine & _
            "This error was raised at " & Now & _
            vbNewLine & vbNewLine & _
            "----------ERROR DESCRIPTION----------" & _
            vbNewLine & vbNewLine & _
            Err.Description & _
            vbNewLine & vbNewLine & _
            "------------------------------------------------"
        .To = "r.green@partner.samsung.com"
        .Importance = olImportanceHigh
        .Send
    End With
    
    Set oMail = Nothing
    Set oApp = Nothing
    
End Sub
Sub SuccessHandler(wbName As String, activeCards As String, blanks As String)

    Dim oApp As Outlook.Application
    Dim oMail As MailItem
    
    Set oApp = CreateObject("Outlook.Application")
    Set oMail = oApp.CreateItem(olMailItem)
    
    With oMail
        .To = "r.green@partner.samsung.com"
        .Subject = "VBA Success | " & wbName
        .Body = wbName & " has successfully run on " & Now & _
            vbNewLine & vbNewLine & _
            "There are " & activeCards & " active credit cards and " & blanks & " blank values within the exported file." & _
            vbNewLine & vbNewLine & _
            "If there are any blank values then something has gone very wrong, lol." & _
            vbNewLine & vbNewLine & _
            "Have a great day! :)"
        .Importance = olImportanceHigh
        .Send
    End With
    
End Sub
